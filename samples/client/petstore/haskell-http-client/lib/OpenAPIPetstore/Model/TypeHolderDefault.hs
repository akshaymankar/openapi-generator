{-
   OpenAPI Petstore

   This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

   OpenAPI Version: 3.0.1
   OpenAPI Petstore API version: 1.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OpenAPIPetstore.Model
-}

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveFoldable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OpenAPIPetstore.Model where

import OpenAPIPetstore.Core
import OpenAPIPetstore.MimeTypes

import Data.Aeson ((.:),(.:!),(.:?),(.=))

import OpenAPIPetstore.Model.Array

import qualified Control.Arrow as P (left)
import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Base64 as B64
import qualified Data.ByteString.Char8 as BC
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.HashMap.Lazy as HM
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Set as Set
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Time as TI
import qualified Lens.Micro as L
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Control.Applicative ((<|>))
import Control.Applicative (Alternative)
import Data.Function ((&))
import Data.Monoid ((<>))
import Data.Text (Text)
import Prelude (($),(/=),(.),(<$>),(<*>),(>>=),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)

import qualified Prelude as P



-- * Parameter newtypes


-- * Models


-- ** TypeHolderDefault
-- | TypeHolderDefault
data TypeHolderDefault = TypeHolderDefault
  { typeHolderDefaultStringItem :: !(Text) -- ^ /Required/ "string_item"
  , typeHolderDefaultNumberItem :: !(Double) -- ^ /Required/ "number_item"
  , typeHolderDefaultIntegerItem :: !(Int) -- ^ /Required/ "integer_item"
  , typeHolderDefaultBoolItem :: !(Bool) -- ^ /Required/ "bool_item"
  , typeHolderDefaultArrayItem :: !([Int]) -- ^ /Required/ "array_item"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TypeHolderDefault
instance A.FromJSON TypeHolderDefault where
  parseJSON = A.withObject "TypeHolderDefault" $ \o ->
    TypeHolderDefault
      <$> (o .:  "string_item")
      <*> (o .:  "number_item")
      <*> (o .:  "integer_item")
      <*> (o .:  "bool_item")
      <*> (o .:  "array_item")

-- | ToJSON TypeHolderDefault
instance A.ToJSON TypeHolderDefault where
  toJSON TypeHolderDefault {..} =
   _omitNulls
      [ "string_item" .= typeHolderDefaultStringItem
      , "number_item" .= typeHolderDefaultNumberItem
      , "integer_item" .= typeHolderDefaultIntegerItem
      , "bool_item" .= typeHolderDefaultBoolItem
      , "array_item" .= typeHolderDefaultArrayItem
      ]


-- | Construct a value of type 'TypeHolderDefault' (by applying it's required fields, if any)
mkTypeHolderDefault
  :: Text -- ^ 'typeHolderDefaultStringItem' 
  -> Double -- ^ 'typeHolderDefaultNumberItem' 
  -> Int -- ^ 'typeHolderDefaultIntegerItem' 
  -> Bool -- ^ 'typeHolderDefaultBoolItem' 
  -> [Int] -- ^ 'typeHolderDefaultArrayItem' 
  -> TypeHolderDefault
mkTypeHolderDefault typeHolderDefaultStringItem typeHolderDefaultNumberItem typeHolderDefaultIntegerItem typeHolderDefaultBoolItem typeHolderDefaultArrayItem =
  TypeHolderDefault
  { typeHolderDefaultStringItem
  , typeHolderDefaultNumberItem
  , typeHolderDefaultIntegerItem
  , typeHolderDefaultBoolItem
  , typeHolderDefaultArrayItem
  }


-- * Enums



